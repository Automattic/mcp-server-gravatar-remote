/* tslint:disable */
/* eslint-disable */
/**
 * Gravatar Public API
 * Gravatar\'s public API endpoints
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  GetVerifiedAccountServices200Response,
  Interest,
  SearchProfilesByVerifiedAccount200Response,
} from '../models/index.js';
import {
    GetVerifiedAccountServices200ResponseFromJSON,
    GetVerifiedAccountServices200ResponseToJSON,
    InterestFromJSON,
    InterestToJSON,
    SearchProfilesByVerifiedAccount200ResponseFromJSON,
    SearchProfilesByVerifiedAccount200ResponseToJSON,
} from '../models/index.js';

export interface GetProfileInferredInterestsByIdRequest {
    profileIdentifier: string;
}

export interface SearchProfilesByVerifiedAccountRequest {
    username: string;
    service?: string;
    page?: number;
    perPage?: number;
}

/**
 * ExperimentalApi - interface
 * 
 * @export
 * @interface ExperimentalApiInterface
 */
export interface ExperimentalApiInterface {
    /**
     * Returns a list of inferred interests based on known and public information about the profile.
     * @summary Get inferred interests for a profile given their identifier
     * @param {string} profileIdentifier This can either be an SHA256 hash of an email address or profile URL slug.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentalApiInterface
     */
    getProfileInferredInterestsByIdRaw(requestParameters: GetProfileInferredInterestsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Interest>>>;

    /**
     * Returns a list of inferred interests based on known and public information about the profile.
     * Get inferred interests for a profile given their identifier
     */
    getProfileInferredInterestsById(requestParameters: GetProfileInferredInterestsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Interest>>;

    /**
     * Returns the list of verified account services with their ID and human-readable labels.
     * @summary Get list of services supported as verified accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentalApiInterface
     */
    getVerifiedAccountServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVerifiedAccountServices200Response>>;

    /**
     * Returns the list of verified account services with their ID and human-readable labels.
     * Get list of services supported as verified accounts
     */
    getVerifiedAccountServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVerifiedAccountServices200Response>;

    /**
     * Searches Gravatar profiles that have a verified account with the given username. Optionally filter by the service (e.g., \'github\', \'twitter\'). See `/verified-accounts/services` for supported ID values. Results are paginated.
     * @summary Search for profiles by verified account username
     * @param {string} username The username used on the verified third-party service.
     * @param {string} [service] The service to limit search to (e.g., \&#39;github\&#39;, \&#39;twitter\&#39;). See &#x60;/verified-accounts/services&#x60; for supported IDs.
     * @param {number} [page] Page number of results to retrieve.
     * @param {number} [perPage] Number of results per page. Defaults to 20, maximum 50.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentalApiInterface
     */
    searchProfilesByVerifiedAccountRaw(requestParameters: SearchProfilesByVerifiedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchProfilesByVerifiedAccount200Response>>;

    /**
     * Searches Gravatar profiles that have a verified account with the given username. Optionally filter by the service (e.g., \'github\', \'twitter\'). See `/verified-accounts/services` for supported ID values. Results are paginated.
     * Search for profiles by verified account username
     */
    searchProfilesByVerifiedAccount(requestParameters: SearchProfilesByVerifiedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchProfilesByVerifiedAccount200Response>;

}

/**
 * 
 */
export class ExperimentalApi extends runtime.BaseAPI implements ExperimentalApiInterface {

    /**
     * Returns a list of inferred interests based on known and public information about the profile.
     * Get inferred interests for a profile given their identifier
     */
    async getProfileInferredInterestsByIdRaw(requestParameters: GetProfileInferredInterestsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Interest>>> {
        if (requestParameters['profileIdentifier'] == null) {
            throw new runtime.RequiredError(
                'profileIdentifier',
                'Required parameter "profileIdentifier" was null or undefined when calling getProfileInferredInterestsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profiles/{profileIdentifier}/inferred-interests`.replace(`{${"profileIdentifier"}}`, encodeURIComponent(String(requestParameters['profileIdentifier']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterestFromJSON));
    }

    /**
     * Returns a list of inferred interests based on known and public information about the profile.
     * Get inferred interests for a profile given their identifier
     */
    async getProfileInferredInterestsById(requestParameters: GetProfileInferredInterestsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Interest>> {
        const response = await this.getProfileInferredInterestsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of verified account services with their ID and human-readable labels.
     * Get list of services supported as verified accounts
     */
    async getVerifiedAccountServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetVerifiedAccountServices200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verified-accounts/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVerifiedAccountServices200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the list of verified account services with their ID and human-readable labels.
     * Get list of services supported as verified accounts
     */
    async getVerifiedAccountServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetVerifiedAccountServices200Response> {
        const response = await this.getVerifiedAccountServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Searches Gravatar profiles that have a verified account with the given username. Optionally filter by the service (e.g., \'github\', \'twitter\'). See `/verified-accounts/services` for supported ID values. Results are paginated.
     * Search for profiles by verified account username
     */
    async searchProfilesByVerifiedAccountRaw(requestParameters: SearchProfilesByVerifiedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchProfilesByVerifiedAccount200Response>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling searchProfilesByVerifiedAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['service'] != null) {
            queryParameters['service'] = requestParameters['service'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profiles/search/by-verified-account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchProfilesByVerifiedAccount200ResponseFromJSON(jsonValue));
    }

    /**
     * Searches Gravatar profiles that have a verified account with the given username. Optionally filter by the service (e.g., \'github\', \'twitter\'). See `/verified-accounts/services` for supported ID values. Results are paginated.
     * Search for profiles by verified account username
     */
    async searchProfilesByVerifiedAccount(requestParameters: SearchProfilesByVerifiedAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchProfilesByVerifiedAccount200Response> {
        const response = await this.searchProfilesByVerifiedAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
