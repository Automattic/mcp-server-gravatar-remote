/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { avatarSchema } from './avatarSchema.js'
import { errorSchema } from './errorSchema.js'
import { z } from 'zod'

export const uploadAvatarQueryParamsSchema = z.object({
  selected_email_hash: z
    .string()
    .describe('The SHA256 hash of email. If provided, the uploaded image will be selected as the avatar for this email.')
    .optional(),
  select_avatar: z
    .boolean()
    .default({})
    .describe(
      "Determines if the uploaded image should be set as the avatar for the email. If not passed, the image is only selected as the email's avatar if no previous avatar has been set. Accepts '1'/'true' to always set the avatar or '0'/'false' to never set the avatar.",
    )
    .nullable(),
})

/**
 * @description Avatar uploaded successfully
 */
export const uploadAvatar200Schema = z.lazy(() => avatarSchema).describe('An avatar that the user has already uploaded to their Gravatar account.')

/**
 * @description Invalid request
 */
export const uploadAvatar400Schema = z.lazy(() => errorSchema).describe('An error response from the API.')

/**
 * @description Not Authorized
 */
export const uploadAvatar401Schema = z.lazy(() => errorSchema).describe('An error response from the API.')

/**
 * @description Insufficient Scope
 */
export const uploadAvatar403Schema = z.lazy(() => errorSchema).describe('An error response from the API.')

export const uploadAvatarMutationRequestSchema = z.object({
  image: z.instanceof(File).describe('The avatar image file'),
})

export const uploadAvatarMutationResponseSchema = z.lazy(() => uploadAvatar200Schema)